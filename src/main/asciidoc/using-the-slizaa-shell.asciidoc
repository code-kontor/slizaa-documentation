[[using-the-slizaa-shell]]
== Using the Slizaa Shell

=== Basics

To list all available commands, use the `help` command.

[source]
----
slizaa:>help
AVAILABLE COMMANDS

Built-In Commands
        clear: Clear the shell screen.
        exit, quit: Exit the shell.
        help: Display help about available commands.
        script: Read and execute commands from a file.
        stacktrace: Display the full stacktrace of the last error.

Slizaa Admin Commands
        gc: Run garbage collector.
        memUsage: Memory usage.

[...]

----

=== Admin Commands

The admin command group contains several commands to monitor and control the overall state
of the Slizaa server instance.

[source]
----
slizaa:>help
AVAILABLE COMMANDS

[...]
include::{generatedDocDir}/listcommandgroups-slizaa-admin-commands.adoc[]
[...]
----

==== Show Memory Usage

You can show the current memory usage of a Slizaa server instance using the command `memUsage`.
The command prints the memory currently used as well as the total memory on the console.

include::{generatedDocDir}/cmdlineexample-memUsage.adoc[]

The `memUsage` command is defined as follows:

include::{generatedDocDir}/cmdlinehelp-memUsage.adoc[]

==== Run the Garbage Collector

Although it is usually not necessary, you can manually run the garbage collector
using the command `gc`.

include::{generatedDocDir}/cmdlineexample-gc.adoc[]

The `gc` command is defined as follows:

include::{generatedDocDir}/cmdlinehelp-gc.adoc[]

=== Database Commands

The commands in the database command group allow you to inspect and manipulate the structure databases in a Slizaa
instance.

==== List all configured databases

You can use the command `listDBs` to list the databases configured in a Slizaa instance.

include::{generatedDocDir}/cmdlineexample-listdbs.adoc[]

The `listDBs` command is defined as follows:

include::{generatedDocDir}/cmdlinehelp-listdbs.adoc[]

==== Create a new database

To create a new database instance, use the `createDB` command.

include::{generatedDocDir}/cmdlineexample-createdb.adoc[]

The `createDB` command is defined as follows:

include::{generatedDocDir}/cmdlinehelp-createdb.adoc[]

==== Start the specified database
To start an existing database instance, use the command `startDB`:

include::{generatedDocDir}/cmdlineexample-startdb.adoc[]

The `startDB` command is defined as follows:

include::{generatedDocDir}/cmdlinehelp-startdb.adoc[]

==== Stop the specified database.

To stop an existing database instance, use the command `stopDB`.

include::{generatedDocDir}/cmdlineexample-stopdb.adoc[]

The `stopDB` command is defined as follows:

include::{generatedDocDir}/cmdlinehelp-stopdb.adoc[]

==== Delete an existing database

To delete an existing database instance, use the `deleteDB` command.

include::{generatedDocDir}/cmdlineexample-deletedb.adoc[]

The `deleteDB` command is defined as follows:

include::{generatedDocDir}/cmdlinehelp-deletedb.adoc[]

==== Parse the definied content

To parse the specified content for a database, use the `parseDB` command.

include::{generatedDocDir}/cmdlineexample-parsedb.adoc[]

The `parseDB` command is defined as follows:

include::{generatedDocDir}/cmdlinehelp-parsedb.adoc[]

=== Content Definition Commands
You can specify the content of an application that should be analyzed using _content definition commands_. The _content_
of an application consists of the JARs and directories that contain classes belonging to your application.

Instead of listing all JARs and directory "manually", you usually use a so-called _content definition providers_
to specify what should be parsed. Content definition providers implement more convenient ways to define your content
(e.g. by simply specifying a directory that contains JARs and directories).

In Slizaa {slizaaVersion} there are two different content definition provider you can choose of:

* *directory*: Using the `directory` content definition provider you can specify an arbitrary folder on
your local drive that contains the JAR files that Slizaa should parse.
* *mvn*: Using the `mvn` content definition provider you can specify a list of maven artifact that
Slizaa should parse. Slizaa automatically will download the specified artifacts during the parsing process.

==== Specify the content to be analyzed.

You can specify your applications content using the `setContentDefinitionProvider` command as shown below:

include::{generatedDocDir}/cmdlineexample-setcontentdefinitionprovider.adoc[]

The `setContentDefinitionProvider` command is defined as follows:

include::{generatedDocDir}/cmdlinehelp-setcontentdefinitionprovider.adoc[]

==== List the available Content Definition Types

You can list the available content definition provider types using the `listContentDefinitionProviderFactories` command:

include::{generatedDocDir}/cmdlineexample-listcontentdefinitionproviderfactories.adoc[]

The `listContentDefinitionProviderFactories` command is defined as follows:

include::{generatedDocDir}/cmdlinehelp-listcontentdefinitionproviderfactories.adoc[]

==== Show Resolved Content Definitions

To simulate the resolving process and fetch a list of all JARs and directories that are defined by a content
definition use the `showResolvedContentDefinitions` command:

include::{generatedDocDir}/cmdlineexample-showresolvedcontentdefinitions.adoc[]

The `showResolvedContentDefinitions` command is defined as follows:

include::{generatedDocDir}/cmdlinehelp-showresolvedcontentdefinitions.adoc[]

=== Hierarchical Graph Commands

==== Create Hierarchical Graph

You can create a new hierarchical graph mapping for a database using the `createHierarchicalGraph` command.

include::{generatedDocDir}/cmdlineexample-createhierarchicalgraph.adoc[]

The `createHierarchicalGraph` command is defined as follows:

include::{generatedDocDir}/cmdlinehelp-createhierarchicalgraph.adoc[]

==== Delete Hierarchical Graph

include::{generatedDocDir}/cmdlineexample-deletehierarchicalgraph.adoc[]

The `createHierarchicalGraph` command is defined as follows:

include::{generatedDocDir}/cmdlinehelp-deletehierarchicalgraph.adoc[]

